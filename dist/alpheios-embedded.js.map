{"version":3,"sources":["webpack://AlpheiosEmbed/webpack/bootstrap","webpack://AlpheiosEmbed/./embedded.js","webpack://AlpheiosEmbed/./state.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC2B;AACmE;AAC9F;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gDAAgD;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,qCAAqC;AACrC;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA,wBAAwB;AACxB,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,KAAK;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8CAA8C,yDAAyD;;AAEvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY,qDAAc,CAAC,gBAAgB,KAAY,eAAe,aAAY,aAAa,iBAAU,QAAQ,yDAAkB,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wDAAwD,iDAAiD;AACzG,OAAO;AACP,wDAAwD,qDAAqD;AAC7G;AACA,KAAK;AACL,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,qCAAqC;AAClG,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0EAA0E,8BAA8B;;AAExG;AACA;;AAEA,KAAK;AACL,6DAA6D,MAAM;AACnE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,WAAW;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,gBAAgB,qDAAqD;;AAErE;AACA;AACA,gBAAgB;AAChB,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;;;;;;;;;;;;;AC3WA;AAAA;AAAA;AACA;AACA,cAAc,YAAY;AAC1B;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"alpheios-embedded.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./embedded.js\");\n","/* eslint-env jest */\r\n/* global Event, BUILD_BRANCH, BUILD_NUMBER, BUILD_NAME */\r\nimport State from './state'\r\nimport { version as packageVersion, description as packageDescription } from '../package.json'\r\n// A variable that will store an instance of the imported components module\r\nlet components\r\n\r\n/**\r\n * Imports dynamic dependencies that are required for the embed-lib.\r\n * @param {object} options - A configuration object of the import function.\r\n * @param {'production' | 'development' | 'cdn' | 'custom'} options.mode - What type of libraries shall be imported.\r\n *         'production' - will load minified version of libraries from a `dist/lib` local directory;\r\n *         'development' - will load non-optimized libraries with source maps from a `dist/lib` local directory;\r\n *         'cdn' - will load the latest version of minified libraries from JSDelivr (this is a default value);\r\n *         'custom' - allows to specify your own paths for loading the libraries. The paths shall be specified\r\n *                    as values of keys of a `libs` object.\r\n * @param {object} options.libs - An object whose properties specify paths from where libraries to be loaded.\r\n *        {string} options.libs.components - A path to a components library. Value for a default `production` mode\r\n *                 is `./lib/alpheios-components.min.js`.\r\n * @return {Promise} - A promise that is resolved when all dependencies are loaded\r\n * or rejected when there was an error during an import.\r\n */\r\nexport function importDependencies (options) {\r\n  let libs = {}\r\n  switch (options.mode) {\r\n    case 'production':\r\n      libs.components = './lib/alpheios-components.min.js'\r\n      break\r\n    case 'development':\r\n      libs.components = './lib/alpheios-components.js'\r\n      break\r\n    case 'custom':\r\n      libs = options.libs\r\n      break\r\n    case 'cdn':\r\n    default:\r\n      libs.components = 'https://cdn.jsdelivr.net/npm/alpheios-components@latest/dist/alpheios-components.min.js'\r\n      break\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    let imports = []\r\n    let componentsImport = import(\r\n      /* webpackIgnore: true */\r\n      libs.components\r\n    ).then(() => {\r\n      components = window.AlpheiosComponents\r\n    })\r\n    imports.push(componentsImport)\r\n\r\n    Promise.all(imports).then(() => {\r\n      resolve (Embedded)\r\n    }).catch((e) => {\r\n      reject(e)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Encapsulation of Alpheios functionality which can be embedded in a webpage\r\n */\r\nexport class Embedded {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} arguments - object with the following properties:\r\n   *     clientId: a string identifying the embedding client or site. Required.\r\n   *     authEnv: authentication environment object.(Optional)\r\n   *     documentObject: the parent document. Default: window.document\r\n   *     enabledSelector: a CSS Selector string identifying the page elements for which Alpheios should be activated\r\n   *                      Default: \".alpheios-enabled\"\r\n   *     disabledSelector: a CSS Selector string identifying the page elements for which Alpheios should be deactivated\r\n   *                       Default: [data-alpheios-ignore=\"all\"]\r\n   *     enabledClass: a CSS class to apply to alpheios/staten enabled elements\r\n   *                   Default: \"\"\r\n   *     disabledClass: a CSS class to apply to alpheios disabled elements\r\n   *                    Default: \"\"\r\n   *     mobileTriggerEvent: DOM Event to trigger word selection on mobile devices\r\n   *                         Default: longTap\r\n   *     desktopTriggerEvent: DOM Event to trigger word selection on desktops\r\n   *                    Default: \"dblclick\"\r\n   *     triggerPreCallback: a callback function which is called when the trigger event handler is invoked, prior to initiating\r\n   *                         Alpheios functionality. It should return true to proceed with lookup or false to abort.\r\n   *                         Default: no-op, returns true\r\n   *     enableMouseMoveOverride: override the desktop trigger with a mousemove handler\r\n   *     popupInitialPos: object containing initial css positioning properties for the popup\r\n   *                      Default { top: 10vh, left: 10vw}\r\n   *     toolbarInitialPos: object containing initial css positioning properties for the toolbar\r\n   *                        Default { top: 10px, right: 15px}\r\n   *     actionPanelInitialPos: object containing initial css positioning properties for the action panel (mobile)\r\n   *                            Default { bottom: 120px, right: 20px}\r\n   *     layoutType: 'default' or 'readingTools' (readingTools is used for the Alpheios Reader UI)\r\n   *                 Default: 'default'\r\n   *     disableTextSelection: set to true to disable default browser text selection behavior (not recommended)\r\n   *                           Default: false\r\n   *     textLangCode: default language for lookups via the toolbar\r\n   *                   Default: null (which will result in the user preferred page language being used)\r\n   *     overrideHelp: set to true to disable the default alpheios behavior for the help icon\r\n   *                   (client code must attach their own handler to the \".alpheios-toolbar__help-control\" element)\r\n   *                   Default: false\r\n   *     simpleMode: set to true to restrict the UI to the popup/morphology panel (with grammar links) and lookup but no other features\r\n   *                 Default: false\r\n   *     arethusaTbRefreshRetryCount: number of times to retry retrieval of treebank data before disabling the\r\n   *                                  functionality for the treebank document\r\n   *                                  Default: 5\r\n   *     arethusaTbRefreshDelay: number of milliseconds to wait in between retrying treebank document requests\r\n   *                             Default: 200,\r\n   */\r\n  constructor ({\r\n    clientId = null,\r\n    authEnv = null,\r\n    documentObject = document,\r\n    enabledSelector = '.alpheios-enabled',\r\n    disabledSelector = '',\r\n    enabledClass = '',\r\n    disabledClass = '',\r\n    mobileTriggerEvent = null,\r\n    desktopTriggerEvent = null,\r\n    triggerPreCallback = (evt) => { return true }, // Not used at the moment but can be set as a filter for `this.app.getSelectedText()` calls\r\n    enableMouseMoveOverride = false,\r\n    popupInitialPos = {},\r\n    toolbarInitialPos = {},\r\n    actionPanelInitialPos = {},\r\n    layoutType = 'default', // The other option is 'readingTools'\r\n    // Disable text selection on mobile devices\r\n    disableTextSelection = false,\r\n    textLangCode = null,\r\n    overrideHelp = false,\r\n    simpleMode = false,\r\n    arethusaTbRefreshRetryCount = 5,\r\n    arethusaTbRefreshDelay = 200\r\n    } = {}) {\r\n    this.clientId = clientId\r\n\r\n    if (this.clientId === null) {\r\n      throw new Error('Please identify the site.')\r\n    }\r\n    // TODO at some point in the future we may add authentication of\r\n    // clientId\r\n    this.doc = documentObject\r\n    this.authEnv = authEnv\r\n    this.state = new State()\r\n    this.enabledSelector = enabledSelector\r\n    this.disabledSelector = disabledSelector\r\n    this.enabledClass = enabledClass\r\n    this.disabledClass = disabledClass\r\n    this.desktopTriggerEvent = desktopTriggerEvent\r\n    this.mobileTriggerEvent = mobileTriggerEvent\r\n    this.triggerPreCallback = triggerPreCallback\r\n    this.enableMouseMoveOverride = enableMouseMoveOverride\r\n    this.simpleMode = simpleMode\r\n\r\n    // Set an initial UI Controller state for activation\r\n    this.state.setPanelClosed() // A default state of the panel is CLOSED\r\n    this.state.tab = 'info' // A default tab is \"info\"\r\n\r\n    this._platform = new components.Platform({ appType: components.Platform.appTypes.EMBEDDED_LIBRARY })\r\n\r\n    this.app = components.AppController.create(this.state, {\r\n      storageAdapter: components.LocalStorageArea,\r\n      textQueryTriggerDesktop: this.desktopTriggerEvent,\r\n      textQueryTriggerMobile: this.mobileTriggerEvent,\r\n      textQuerySelector: this.enabledSelector,\r\n      triggerPreCallback: this.triggerPreCallback,\r\n      enableMouseMoveOverride: this.enableMouseMoveOverride,\r\n      app: { version:`${packageVersion}`, buildBranch: BUILD_BRANCH, buildNumber: BUILD_NUMBER, buildName: BUILD_NAME, name: packageDescription },\r\n      appType: components.Platform.appTypes.EMBEDDED_LIBRARY,\r\n      clientId: this.clientId,\r\n      // Disable text selection on mobile devices\r\n      disableTextSelection: disableTextSelection,\r\n      textLangCode: textLangCode,\r\n      overrideHelp: overrideHelp,\r\n      configServiceUrl: 'https://config.alpheios.net/v1/config',\r\n      arethusaTbRefreshRetryCount: arethusaTbRefreshRetryCount,\r\n      arethusaTbRefreshDelay: arethusaTbRefreshDelay\r\n    })\r\n    // Environment-specific initializations\r\n    if (this.authEnv) {\r\n      if (authEnv.CLIENT_ID) {\r\n        // Register an authentication module only with authentication environment is loaded\r\n        this.app.registerModule(components.AuthModule, { auth: new components.AppAuthenticator(authEnv) })\r\n      } else if (authEnv.LOGIN_URL) {\r\n        this.app.registerModule(components.AuthModule, { auth: new components.SessionAuthenticator(authEnv) })\r\n      }\r\n    } else {\r\n      this.app.registerModule(components.AuthModule, { auth: null })\r\n    }\r\n    // Register UI modules\r\n    let panelParams = {}\r\n    if (this.simpleMode) {\r\n      panelParams.showNav = false\r\n    }\r\n    this.app.registerModule(components.PanelModule, panelParams)\r\n\r\n    let popupParams = {}\r\n    if (popupInitialPos && Object.values(popupInitialPos).filter(value => Boolean(value)).length > 0) {\r\n      popupParams.initialPos = popupInitialPos\r\n    }\r\n    if (this.simpleMode) {\r\n      popupParams.showNav = false\r\n    }\r\n    this.app.registerModule(components.PopupModule, popupParams)\r\n\r\n    let actionPanelParams = {}\r\n    if (actionPanelInitialPos && Object.values(actionPanelInitialPos).filter(value => Boolean(value)).length > 0) {\r\n      actionPanelParams.initialPos = actionPanelInitialPos\r\n    }\r\n    if (this.simpleMode) {\r\n      actionPanelParams.showNav = false\r\n    } else {\r\n      actionPanelParams.showNav = true\r\n    }\r\n\r\n    let toolbarParams = {}\r\n    if (this.simpleMode) {\r\n      toolbarParams.showNav = false\r\n    }\r\n    if (layoutType === 'default') {\r\n      if (toolbarInitialPos && Object.values(toolbarInitialPos).filter(value => Boolean(value)).length > 0) {\r\n        toolbarParams.initialPos = toolbarInitialPos\r\n      }\r\n\r\n      this.app.registerModule(components.ToolbarModule, toolbarParams)\r\n      this.app.registerModule(components.ActionPanelModule, { showNav: actionPanelParams.showNav })\r\n    } else if (layoutType === 'readingTools') {\r\n      // This is a special configuration for Alpheios Reading Tools\r\n      if (this._platform.isDesktop) {\r\n        if (toolbarInitialPos && Object.values(toolbarInitialPos).filter(value => Boolean(value)).length > 0) {\r\n          toolbarParams.initialPos = toolbarInitialPos\r\n        }\r\n\r\n        this.app.registerModule(components.ToolbarModule, toolbarParams)\r\n      } else if (this._platform.isMobile) {\r\n        this.app.registerModule(components.ActionPanelModule, {\r\n          lookupResultsIn: 'panel',\r\n          initialPos: actionPanelParams.initialPos,\r\n          showNav: actionPanelParams.showNav\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: Is it used by any external code?\r\n  get platform () {\r\n    return this._platform\r\n  }\r\n\r\n  notifyExtension () {\r\n    this.doc.body.dispatchEvent(new Event('Alpheios_Embedded_Response'))\r\n  }\r\n\r\n  async activate () {\r\n    try {\r\n      /**\r\n       * Notify extension that an embedded lib is present.\r\n       * We need to do this right after an activation.\r\n       * If webextension is loaded sooner than the embedded library\r\n       * than the extension will have no information about\r\n       * the embedded library presence unless explicitly notified by us.\r\n       */\r\n      this.notifyExtension()\r\n\r\n      // await this.app.init() // Activate will call `init()` if has not been initialized previously\r\n      await this.app.activate()\r\n\r\n      // Set a body attribute so the content scrip will know if embedded library is active on a page\r\n      this.doc.body.setAttribute('alpheios-embed-lib-status', 'active')\r\n      this.doc.body.addEventListener('Alpheios_Embedded_Check', event => { this.notifyExtension(event) })\r\n\r\n      // and set the state on the components\r\n      this.app.setEmbedLibActive(true)\r\n\r\n    } catch (error) {\r\n      console.error(`Unexpected error activating Alpheios: ${error}`)\r\n      return\r\n    }\r\n\r\n    let selector = this.enabledSelector\r\n\r\n    if (!selector) {\r\n      throw new Error('Configuration must define selector')\r\n    }\r\n    let activateOn = this.doc.querySelectorAll(selector)\r\n    if (activateOn.length === 0) {\r\n      // it could be that we want to activate Alpheios for lookups via the\r\n      // tools even if there isn't any text on the page to activate to on\r\n      // so just print a warning here.\r\n      console.warn(`Alpheios was activated for the page but not any content (no elements matching ${activateOn}).`)\r\n    }\r\n    if (this.enabledClass) {\r\n      for (let elem of activateOn) {\r\n        elem.classList.add(this.enabledClass)\r\n      }\r\n    }\r\n    if (this.disabledSelector) {\r\n      let disableOn = this.doc.querySelectorAll(this.disabledSelector)\r\n      for (let elem of disableOn) {\r\n        elem.setAttribute('data-alpheios-ignore', 'all')\r\n        if (this.disabledClass) {\r\n          elem.classList.add(this.disabledClass)\r\n        }\r\n      }\r\n    }\r\n\r\n    let alignment = new components.AlignmentSelector(this.doc, {})\r\n    alignment.activate()\r\n    let alignmentTranslation = components.AppController.initAlignedTranslation(this.doc, '.aligned-translation',\r\n      {\r\n        // resize from all edges and corners\r\n        edges: { left: true, right: true, bottom: false, top: false },\r\n\r\n        // minimum size\r\n        restrictSize: {\r\n          min: { width: 200 }\r\n        },\r\n\r\n        // keep the edges inside the parent\r\n        restrictEdges: {\r\n          outer: this.doc.body,\r\n          endOnly: true\r\n        },\r\n        inertia: true\r\n      },\r\n      event => {\r\n        let target = event.target\r\n        // update the element's style\r\n        target.style.width = `${event.rect.width}px`\r\n      })\r\n    return this\r\n  }\r\n\r\n  openToolbar () {\r\n    this.app.api.ui.openToolbar()\r\n  }\r\n\r\n  openActionPanel () {\r\n    if (this._platform.isMobile) {\r\n      this.app.api.ui.closePanel()\r\n    }\r\n    this.app.api.ui.openActionPanel()\r\n  }\r\n\r\n  closeActionPanel () {\r\n    this.app.api.ui.closeActionPanel()\r\n  }\r\n\r\n  /**\r\n   * Opens the action panel with toolbar buttons hidden and only the lookup visible.\r\n   */\r\n  openActionPanelLookup () {\r\n    if (this._platform.isMobile) {\r\n      this.app.api.ui.closePanel()\r\n    }\r\n    this.app.api.ui.openActionPanel({ showNav: false })\r\n  }\r\n\r\n  /**\r\n   * Opens the action panel with only toolbar buttons visible.\r\n   */\r\n  openActionPanelToolbar () {\r\n    if (this._platform.isMobile) {\r\n      this.app.api.ui.closePanel()\r\n    }\r\n    this.app.api.ui.openActionPanel({ showLookup: false })\r\n  }\r\n}\r\n","/**\r\n * Contains Alpheios state\r\n * @property {panelStatus} panelStatus\r\n */\r\nexport default class State {\r\n  constructor (tabID) {\r\n    this.panelStatus = undefined\r\n    this.tab = undefined\r\n    this.watchers = new Map()\r\n  }\r\n\r\n  static create (source) {\r\n    let copy = new State()\r\n    for (let key of Object.keys(source)) {\r\n      copy[key] = source[key]\r\n    }\r\n    return copy\r\n  }\r\n\r\n  static get defaults () {\r\n    return {\r\n      panelStatus: State.statuses.panel.OPEN\r\n    }\r\n  }\r\n\r\n  static get statuses () {\r\n    return {\r\n      embedLib: {\r\n        PENDING: Symbol.for('Alpheios_Status_Pending'), // Has not been fully initialized yet\r\n        ACTIVE: Symbol.for('Alpheios_Status_Active'), // Is loaded and active\r\n        DEACTIVATED: Symbol.for('Alpheios_Status_Deactivated'), // Has been loaded, but is deactivated\r\n        DISABLED: Symbol.for('Alpheios_Status_Disabled') // Has been loaded, but it is disabled\r\n      },\r\n      panel: {\r\n        OPEN: Symbol.for('Alpheios_Status_PanelOpen'), // Panel is open\r\n        CLOSED: Symbol.for('Alpheios_Status_PanelClosed'), // Panel is closed\r\n        DEFAULT: Symbol.for('Alpheios_Status_PanelDefault') // Panel should set its state according to default values\r\n      },\r\n      tab: {\r\n        DEFAULT: 'default' // A tab should be set according to default values\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a watcher function that is called every time a property is changed using a setItem() method.\r\n   * @param {String} property - A name of a property that should be monitored\r\n   * @param {Function} watchFunc - A function that will be called every time a property changes\r\n   * @return {State} Reference to self for chaining\r\n   */\r\n  setWatcher (property, watchFunc) {\r\n    this.watchers.set(property, watchFunc)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * SetItem provides a monitored way to change state. If value is assigned to a data property directly\r\n   * there is no way to know if a property was changed. However, if a property was changed using setItem() method,\r\n   * and if there is a watcher function registered for a changed property name,\r\n   * this function will be called on every property change, passing a changed property name as an argument.\r\n   * @param key\r\n   * @param value\r\n   * @return {State}\r\n   */\r\n  setItem (key, value) {\r\n    this[key] = value\r\n    if (this.watchers && this.watchers.has(key)) {\r\n      this.watchers.get(key)(key, this)\r\n    }\r\n    return this\r\n  }\r\n\r\n  isPanelOpen () {\r\n    return this.panelStatus === State.statuses.panel.OPEN\r\n  }\r\n\r\n  isPanelClosed () {\r\n    return this.panelStatus === State.statuses.panel.CLOSED\r\n  }\r\n\r\n  isPanelStateDefault () {\r\n    return this.panelStatus === State.statuses.panel.DEFAULT\r\n  }\r\n\r\n  isPanelStateValid () {\r\n    return (\r\n      this.panelStatus === State.statuses.panel.OPEN ||\r\n      this.panelStatus === State.statuses.panel.CLOSED\r\n    )\r\n  }\r\n\r\n  setPanelOpen () {\r\n    this.setItem('panelStatus', State.statuses.panel.OPEN)\r\n    return this\r\n  }\r\n\r\n  setPanelClosed () {\r\n    this.setItem('panelStatus', State.statuses.panel.CLOSED)\r\n    return this\r\n  }\r\n\r\n  changeTab (tabName) {\r\n    this.setItem('tab', tabName)\r\n    return this\r\n  }\r\n\r\n  activateUI () {\r\n    this.setItem('uiActive', true)\r\n    return this\r\n  }\r\n\r\n  // TODO: A temporary solution for compatibility with TabScript.\r\n  isActive () {\r\n    return this.status === State.statuses.embedLib.ACTIVE\r\n  }\r\n\r\n  isDeactivated () {\r\n    return this.status === State.statuses.embedLib.DEACTIVATED\r\n  }\r\n\r\n  isDisabled () {\r\n    return this.status === State.statuses.embedLib.DISABLED\r\n  }\r\n\r\n  isTabStateDefault () {\r\n    return this.tab === State.statuses.tab.DEFAULT\r\n  }\r\n\r\n  uiIsActive () {\r\n    return this.uiActive\r\n  }\r\n\r\n  activate () {\r\n    this.status = State.statuses.embedLib.ACTIVE\r\n    return this\r\n  }\r\n\r\n  deactivate () {\r\n    this.status = State.statuses.embedLib.DEACTIVATED\r\n    return this\r\n  }\r\n\r\n  disable () {\r\n    this.status = State.statuses.embedLib.DISABLED\r\n    return this\r\n  }\r\n}\r\n"],"sourceRoot":""}