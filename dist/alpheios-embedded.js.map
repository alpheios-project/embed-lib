{"version":3,"sources":["webpack://AlpheiosEmbed/webpack/bootstrap","webpack://AlpheiosEmbed/C:/uds/projects/alpheios/components/src/lib/auth/auth-data.js","webpack://AlpheiosEmbed/./embedded.js","webpack://AlpheiosEmbed/./lib/app-authenticator.js","webpack://AlpheiosEmbed/./lib/session-authenticator.js","webpack://AlpheiosEmbed/./state.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC2B;AAC0F;AAC/D;AACQ;AAC9D;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gDAAgD;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,qCAAqC;AACrC;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD,wBAAwB;AACxB,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,KAAK;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY,qDAAc,CAAC,GAAG,mDAAY,CAAC,SAAS,yDAAkB,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uDAAuD,WAAW,8DAAgB,WAAW;AAC7F,OAAO;AACP,uDAAuD,WAAW,kEAAoB,WAAW;AACjG;AACA,KAAK;AACL,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,qCAAqC;AACjG,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0EAA0E,8BAA8B;;AAExG;AACA;;AAEA,KAAK;AACL,6DAA6D,MAAM;AACnE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG,WAAW;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,gBAAgB,qDAAqD;;AAErE;AACA;AACA,gBAAgB;AAChB,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;;;;;;;;;;;;;AC5VA;AAAA;AAAA;AAAuF;AACvF;AACA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mGAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;;;;;;;;;;;AC1MA;AAAA;AAAA;AACA;AACA;AACA;AACe;AACf;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,yCAAyC,MAAM;AAC/C,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,uCAAuC,MAAM;AAC7C,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AACA;AACA,cAAc,YAAY;AAC1B;AACe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"alpheios-embedded.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./embedded.js\");\n","/**\r\n * Definition of an AuthData class.\r\n *\r\n * @module AuthData\r\n */\r\n\r\n/**\r\n * A class representing an authentication data in a format that is provider agnostic.\r\n *\r\n * Not all props must necessarily be populated all the time. What props data is present depends\r\n * on the state of the authentication and on what data is available and what data\r\n * was presented by the holder of auth data.\r\n */\r\nexport default class AuthData {\r\n  constructor () {\r\n    /**\r\n     * Whether a user has been authenticated or not.\r\n     *\r\n     * @type {boolean}\r\n     * @public\r\n     */\r\n    this.isAuthenticated = false\r\n\r\n    /**\r\n     * An access token string\r\n     *\r\n     * @type {string}\r\n     * @public\r\n     */\r\n    this.accessToken = undefined\r\n\r\n    /**\r\n     * An expiration date and time of an access token.\r\n     *\r\n     * @type {Date}\r\n     * @public\r\n     */\r\n    this.expirationDateTime = undefined\r\n\r\n    /**\r\n     * A user id (in Auth0 it is `sub`).\r\n     *\r\n     * @type {string}\r\n     * @public\r\n     */\r\n    this.userId = undefined\r\n\r\n    /**\r\n     * A user name.\r\n     *\r\n     * @type {string}\r\n     * @public\r\n     */\r\n    this.userName = undefined\r\n\r\n    /**\r\n     * A user nickname.\r\n     *\r\n     * @type {string}\r\n     * @public\r\n     */\r\n    this.userNickname = undefined\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of an AuthData object out of a serializable one.\r\n   *\r\n   * @param {object} serializable - A serializable version of an AuthData object.\r\n   * @returns {AuthData} - An AuthData object populated with data from serializable.\r\n   */\r\n  static fromSerializable (serializable) {\r\n    let authData = new AuthData() // eslint-disable-line prefer-const\r\n    Object.assign(authData, serializable)\r\n    authData.expirationDateTime = serializable.expirationDateTime ? new Date(serializable.expirationDateTime) : undefined\r\n    return authData\r\n  }\r\n\r\n  /**\r\n   * Creates a serializable copy of an AuthData object.\r\n   *\r\n   * @returns {object} - A serializable copy of an AuthData object.\r\n   */\r\n  serializable () {\r\n    let serializable = Object.assign({}, this) // eslint-disable-line prefer-const\r\n    serializable.expirationDateTime = this.expirationDateTime.toJSON()\r\n    return serializable\r\n  }\r\n\r\n  /**\r\n   * Sets an authentication status\r\n   *\r\n   * @param {boolean} authStatus - Authentication status: true if user is authenticated, false otherwise.\r\n   * @returns {AuthData} - A self reference for chaining.\r\n   */\r\n  setAuthStatus (authStatus) {\r\n    this.isAuthenticated = authStatus\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets an expiration date and time from a duration provided.\r\n   *\r\n   * @param {number} interval - An expiration interval, in milliseconds.\r\n   * @returns {AuthData} - A self reference for chaining.\r\n   */\r\n  setSessionDuration (interval) {\r\n    this.expirationDateTime = new Date(Date.now() + interval)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Checks if the user session has been expired.\r\n   *\r\n   * @returns {boolean} - True if expired, false otherwise.\r\n   */\r\n  get isExpired () {\r\n    return (this.expirationDateTime.getTime() <= Date.now())\r\n  }\r\n\r\n  /**\r\n   * Returns a remaining duration of a user session.\r\n   *\r\n   * @returns {number} - Remaining duration of user session, in milliseconds, or zero if session has been expired.\r\n   */\r\n  get expirationInterval () {\r\n    return !this.isExpired ? this.expirationDateTime.getTime() - Date.now() : 0\r\n  }\r\n}\r\n","/* eslint-env jest */\r\n/* global Event */\r\nimport State from './state'\r\nimport { version as packageVersion, build as packageBuild, description as packageDescription } from '../package.json'\r\nimport AppAuthenticator from './lib/app-authenticator'\r\nimport SessionAuthenticator from './lib/session-authenticator'\r\n// A variable that will store an instance of the imported components module\r\nlet components\r\n\r\n/**\r\n * Imports dynamic dependencies that are required for the embed-lib.\r\n * @param {object} options - A configuration object of the import function.\r\n * @param {'production' | 'development' | 'cdn' | 'custom'} options.mode - What type of libraries shall be imported.\r\n *         'production' - will load minified version of libraries from a `dist/lib` local directory;\r\n *         'development' - will load non-optimized libraries with source maps from a `dist/lib` local directory;\r\n *         'cdn' - will load the latest version of minified libraries from JSDelivr (this is a default value);\r\n *         'custom' - allows to specify your own paths for loading the libraries. The paths shall be specified\r\n *                    as values of keys of a `libs` object.\r\n * @param {object} options.libs - An object whose properties specify paths from where libraries to be loaded.\r\n *        {string} options.libs.components - A path to a components library. Value for a default `production` mode\r\n *                 is `./lib/alpheios-components.min.js`.\r\n * @return {Promise} - A promise that is resolved when all dependencies are loaded\r\n * or rejected when there was an error during an import.\r\n */\r\nexport function importDependencies (options) {\r\n  let libs = {}\r\n  switch (options.mode) {\r\n    case 'production':\r\n      libs.components = './lib/alpheios-components.min.js'\r\n      break\r\n    case 'development':\r\n      libs.components = './lib/alpheios-components.js'\r\n      break\r\n    case 'custom':\r\n      libs = options.libs\r\n      break\r\n    case 'cdn':\r\n    default:\r\n      libs.components = 'https://cdn.jsdelivr.net/npm/alpheios-components@latest/dist/alpheios-components.min.js'\r\n      break\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    let imports = []\r\n    let componentsImport = import(\r\n      /* webpackIgnore: true */\r\n      libs.components\r\n    ).then(() => {\r\n      components = window.AlpheiosComponents\r\n    })\r\n    imports.push(componentsImport)\r\n\r\n    Promise.all(imports).then(() => {\r\n      resolve (Embedded)\r\n    }).catch((e) => {\r\n      reject(e)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Encapsulation of Alpheios functionality which can be embedded in a webpage\r\n */\r\nclass Embedded {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} arguments - object with the following properties:\r\n   *     clientId: a string identifying the embedding client or site. Required.\r\n   *     authEnv: authentication environment object.(Optional)\r\n   *     documentObject: the parent document. Default: window.document\r\n   *     enabledSelector: a CSS Selector string identifying the page elements for which Alpheios should be activated\r\n   *                      Default: \".alpheios-enabled\"\r\n   *     disabledSelector: a CSS Selector string identifying the page elements for which Alpheios should be deactivated\r\n   *                       Default: [data-alpheios-ignore=\"all\"]\r\n   *     enabledClass: a CSS class to apply to alpheios/staten enabled elements\r\n   *                   Default: \"\"\r\n   *     disabledClass: a CSS class to apply to alpheios disabled elements\r\n   *                    Default: \"\"\r\n   *     mobileTriggerEvent: DOM Event to trigger word selection on mobile devices\r\n   *                         Default: longTap\r\n   *     desktopTriggerEvent: DOM Event to trigger word selection on desktops\r\n   *                    Default: \"dblclick\"\r\n   *     triggerPreCallback: a callback function which is called when the trigger event handler is invoked, prior to initiating\r\n   *                         Alpheios functionality. It should return true to proceed with lookup or false to abort.\r\n   *                         Default: no-op, returns true\r\n   *     popupInitialPos: object containing initial css positioning properties for the popup\r\n   *                      Default { top: 10vh, left: 10vw}\r\n   *     toolbarInitialPos: object containing initial css positioning properties for the toolbar\r\n   *                        Default { top: 10px, right: 15px}\r\n   *     actionPanelInitialPos: object containing initial css positioning properties for the action panel (mobile)\r\n   *                            Default { bottom: 120px, right: 20px}\r\n   *     layoutType: 'default' or 'readingTools' (readingTools is used for the Alpheios Reader UI)\r\n   *                 Default: 'default'\r\n   *     disableTextSelection: set to true to disable default browser text selection behavior (not recommended)\r\n   *                           Default: false\r\n   *     textLangCode: default language for lookups via the toolbar\r\n   *                   Default: null (which will result in the user preferred page language being used)\r\n   *     overrideHelp: set to true to disable the default alpheios behavior for the help icon\r\n   *                   (client code must attach their own handler to the \".alpheios-toolbar__help-control\" element)\r\n   *                   Default: false\r\n   *     simpleMode: set to true to restrict the UI to the popup/morphology panel (with grammar links) and lookup but no other features\r\n   *                 Default: false\r\n   */\r\n  constructor ({\r\n    clientId = null,\r\n    authEnv = null,\r\n    documentObject = document,\r\n    enabledSelector = '.alpheios-enabled',\r\n    disabledSelector = '',\r\n    enabledClass = '',\r\n    disabledClass = '',\r\n    mobileTriggerEvent = null,\r\n    desktopTriggerEvent = null,\r\n    triggerPreCallback = (evt) => { return true }, // Not used at the moment but can be set as a filter for `this.ui.getSelectedText()` calls\r\n    popupInitialPos = {},\r\n    toolbarInitialPos = {},\r\n    actionPanelInitialPos = {},\r\n    layoutType = 'default', // The other option is 'readingTools'\r\n    // Disable text selection on mobile devices\r\n    disableTextSelection = false,\r\n    textLangCode = null,\r\n    overrideHelp = false,\r\n    simpleMode = false\r\n    } = {}) {\r\n    this.clientId = clientId\r\n\r\n    if (this.clientId === null) {\r\n      throw new Error('Please identify the site.')\r\n    }\r\n    // TODO at some point in the future we may add authentication of\r\n    // clientId\r\n    this.doc = documentObject\r\n    this.authEnv = authEnv\r\n    this.state = new State()\r\n    this.enabledSelector = enabledSelector\r\n    this.disabledSelector = disabledSelector\r\n    this.enabledClass = enabledClass\r\n    this.disabledClass = disabledClass\r\n    this.desktopTriggerEvent = desktopTriggerEvent\r\n    this.mobileTriggerEvent = mobileTriggerEvent\r\n    this.triggerPreCallback = triggerPreCallback\r\n    this.simpleMode = simpleMode\r\n\r\n    // Set an initial UI Controller state for activation\r\n    this.state.setPanelClosed() // A default state of the panel is CLOSED\r\n    this.state.tab = 'info' // A default tab is \"info\"\r\n\r\n    this.ui = components.UIController.create(this.state, {\r\n      storageAdapter: components.LocalStorageArea,\r\n      textQueryTriggerDesktop: this.desktopTriggerEvent,\r\n      textQueryTriggerMobile: this.mobileTriggerEvent,\r\n      textQuerySelector: this.enabledSelector,\r\n      triggerPreCallback: this.triggerPreCallback,\r\n      app: { version:`${packageVersion}.${packageBuild}`, name: packageDescription },\r\n      appType: components.Platform.appTypes.EMBEDDED_LIBRARY,\r\n      clientId: this.clientId,\r\n      // Disable text selection on mobile devices\r\n      disableTextSelection: disableTextSelection,\r\n      textLangCode: textLangCode,\r\n      overrideHelp: overrideHelp\r\n    })\r\n    // Environment-specific initializations\r\n    if (this.authEnv) {\r\n      if (authEnv.CLIENT_ID) {\r\n        // Register an authentication module only with authentication environment is loaded\r\n        this.ui.registerModule(components.AuthModule, { auth: new AppAuthenticator(authEnv) })\r\n      } else if (authEnv.LOGIN_URL) {\r\n        this.ui.registerModule(components.AuthModule, { auth: new SessionAuthenticator(authEnv) })\r\n      }\r\n    } else {\r\n      this.ui.registerModule(components.AuthModule, { auth: null })\r\n    }\r\n    // Register UI modules\r\n    let panelParams = {}\r\n    if (this.simpleMode) {\r\n      panelParams.showNav = false\r\n    }\r\n    this.ui.registerModule(components.PanelModule, panelParams)\r\n\r\n    let popupParams = {}\r\n    if (popupInitialPos && Object.values(popupInitialPos).filter(value => Boolean(value)).length > 0) {\r\n      popupParams.initialPos = popupInitialPos\r\n    }\r\n    if (this.simpleMode) {\r\n      popupParams.showNav = false\r\n    }\r\n    this.ui.registerModule(components.PopupModule, popupParams)\r\n\r\n    let actionPanelParams = {}\r\n    if (actionPanelInitialPos && Object.values(actionPanelInitialPos).filter(value => Boolean(value)).length > 0) {\r\n      actionPanelParams.initialPos = actionPanelInitialPos\r\n    }\r\n    if (this.simpleMode) {\r\n      actionPanelParams.showNav = false\r\n    } else {\r\n      actionPanelParams.showNav = true\r\n    }\r\n\r\n    let toolbarParams = {}\r\n    if (this.simpleMode) {\r\n      toolbarParams.showNav = false\r\n    }\r\n    if (layoutType === 'default') {\r\n      if (toolbarInitialPos && Object.values(toolbarInitialPos).filter(value => Boolean(value)).length > 0) {\r\n        toolbarParams.initialPos = toolbarInitialPos\r\n      }\r\n\r\n      this.ui.registerModule(components.ToolbarModule, toolbarParams)\r\n      this.ui.registerModule(components.ActionPanelModule, { showNav: actionPanelParams.showNav })\r\n    } else if (layoutType === 'readingTools') {\r\n      // This is a special configuration for Alpheios Reading Tools\r\n      if (this.ui.platform.isDesktop) {\r\n        if (toolbarInitialPos && Object.values(toolbarInitialPos).filter(value => Boolean(value)).length > 0) {\r\n          toolbarParams.initialPos = toolbarInitialPos\r\n        }\r\n\r\n        this.ui.registerModule(components.ToolbarModule, toolbarParams)\r\n      } else if (this.ui.platform.isMobile) {\r\n        this.ui.registerModule(components.ActionPanelModule, {\r\n          lookupResultsIn: 'panel',\r\n          initialPos: actionPanelParams.initialPos,\r\n          showNav: actionPanelParams.showNav\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  get platform () {\r\n    return this.ui.platform\r\n  }\r\n\r\n  notifyExtension () {\r\n    this.doc.body.dispatchEvent(new Event('Alpheios_Embedded_Response'))\r\n  }\r\n\r\n  async activate () {\r\n    try {\r\n      /**\r\n       * Notify extension that an embedded lib is present.\r\n       * We need to do this right after an activation.\r\n       * If webextension is loaded sooner than the embedded library\r\n       * than the extension will have no information about\r\n       * the embedded library presence unless explicitly notified by us.\r\n       */\r\n      this.notifyExtension()\r\n\r\n      // await this.ui.init() // Activate will call `init()` if has not been initialized previously\r\n      await this.ui.activate()\r\n\r\n      // Set a body attribute so the content scrip will know if embedded library is active on a page\r\n      this.doc.body.setAttribute('alpheios-embed-lib-status', 'active')\r\n      this.doc.body.addEventListener('Alpheios_Embedded_Check', event => { this.notifyExtension(event) })\r\n\r\n      // and set the state on the components\r\n      this.ui.setEmbedLibActive(true)\r\n\r\n    } catch (error) {\r\n      console.error(`Unexpected error activating Alpheios: ${error}`)\r\n      return\r\n    }\r\n\r\n    let selector = this.enabledSelector\r\n\r\n    if (!selector) {\r\n      throw new Error('Configuration must define selector')\r\n    }\r\n    let activateOn = this.doc.querySelectorAll(selector)\r\n    if (activateOn.length === 0) {\r\n      // it could be that we want to activate Alpheios for lookups via the\r\n      // tools even if there isn't any text on the page to activate to on\r\n      // so just print a warning here.\r\n      console.warn(`Alpheios was activated for the page but not any content (no elements matching ${activateOn}).`)\r\n    }\r\n    if (this.enabledClass) {\r\n      for (let elem of activateOn) {\r\n        elem.classList.add(this.enabledClass)\r\n      }\r\n    }\r\n    if (this.disabledSelector) {\r\n      let disableOn = this.doc.querySelectorAll(this.disabledSelector)\r\n      for (let elem of disableOn) {\r\n        elem.setAttribute('data-alpheios-ignore', 'all')\r\n        if (this.disabledClass) {\r\n          elem.classList.add(this.disabledClass)\r\n        }\r\n      }\r\n    }\r\n\r\n    let alignment = new components.AlignmentSelector(this.doc, {})\r\n    alignment.activate()\r\n    let alignmentTranslation = components.UIController.initAlignedTranslation(this.doc, '.aligned-translation',\r\n      {\r\n        // resize from all edges and corners\r\n        edges: { left: true, right: true, bottom: false, top: false },\r\n\r\n        // minimum size\r\n        restrictSize: {\r\n          min: { width: 200 }\r\n        },\r\n\r\n        // keep the edges inside the parent\r\n        restrictEdges: {\r\n          outer: this.doc.body,\r\n          endOnly: true\r\n        },\r\n        inertia: true\r\n      },\r\n      event => {\r\n        let target = event.target\r\n        // update the element's style\r\n        target.style.width = `${event.rect.width}px`\r\n      })\r\n    return this\r\n  }\r\n\r\n  openToolbar () {\r\n    this.ui.openToolbar()\r\n  }\r\n\r\n  openActionPanel () {\r\n    if (this.ui.platform.isMobile) {\r\n      this.ui.closePanel()\r\n    }\r\n    this.ui.openActionPanel()\r\n  }\r\n\r\n  closeActionPanel () {\r\n    this.ui.closeActionPanel()\r\n  }\r\n\r\n  /**\r\n   * Opens the action panel with toolbar buttons hidden and only the lookup visible.\r\n   */\r\n  openActionPanelLookup () {\r\n    if (this.ui.platform.isMobile) {\r\n      this.ui.closePanel()\r\n    }\r\n    this.ui.openActionPanel({ showNav: false })\r\n  }\r\n\r\n  /**\r\n   * Opens the action panel with only toolbar buttons visible.\r\n   */\r\n  openActionPanelToolbar () {\r\n    if (this.ui.platform.isMobile) {\r\n      this.ui.closePanel()\r\n    }\r\n    this.ui.openActionPanel({ showLookup: false })\r\n  }\r\n}\r\n","import AuthData from '../../node_modules/alpheios-components/src/lib/auth/auth-data.js'\r\n/* global Auth0Lock */\r\n/**\r\n * Encapsulates Authentication Functionality For a Client Side Application\r\n */\r\nexport default class AppAuthenticator {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} env - environment object with the following properties\r\n   *    CLIENT_ID - Auth0 client id\r\n   *    DOMAIN - Auth0 domain\r\n   *    AUDIENCE - Auth0 audience\r\n   *    ENDPOINTS - Alpheios user api endpoints\r\n   *    LOGOUT_URL - Auth0 logout url\r\n   */\r\n  constructor (env) {\r\n    // An Auth0 Lock widget instance. Will be initialized lazily\r\n    this.auth0Lock = null\r\n    this._auth0profile = null // A user profile from Auth0\r\n    this.env = env\r\n  }\r\n\r\n  /**\r\n   * a link for login external to the alpheios components\r\n   * @return null for client side login\r\n   */\r\n  loginUrl() {\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * a link for logout external to the alpheios components\r\n   * @return null for client side login\r\n   */\r\n  logoutUrl() {\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * session request unimplemented for app auth\r\n   */\r\n   session () {\r\n     return new Promise((resolve,reject) => {\r\n       reject(new Error(\"Session request not supported\"))\r\n    })\r\n   }\r\n\r\n  /**\r\n   * Authenticates user with an Auth0.\r\n   * @return {Promise}\r\n   */\r\n  authenticate () {\r\n    // TODO we should check to see if we already have a valid idToken before\r\n    // initiating authentication\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.auth0Lock) {\r\n        if (!this.env) {\r\n          let error = `Unable to find Auth0 configuration. Auth0 functionality will be disabled`\r\n          console.error(error)\r\n          reject(error)\r\n        }\r\n        // test environment\r\n        if (this.env.TEST_ID) {\r\n          localStorage.setItem('access_token', this.env.TEST_ID)\r\n          localStorage.setItem('id_token', this.env.TEST_ID)\r\n          localStorage.setItem('is_test_user', true)\r\n          const sessionDuration = 3600000 /* One hour */\r\n          const expirationDateTime = new Date(Date.now() + sessionDuration)\r\n          localStorage.setItem('expiration_date_time', expirationDateTime.toJSON())\r\n          resolve(\"Authenticated\")\r\n        } else {\r\n          // initialize auth0 lock\r\n          this.auth0Lock = new Auth0Lock(this.env.CLIENT_ID, this.env.DOMAIN, {\r\n            theme: {\r\n              logo: 'https://alpheios.net/logos/alpheios_32.png',\r\n              labeledSubmitButton: false,\r\n              primaryColor: '#436476'\r\n            },\r\n            languageDictionary: {\r\n              title: \"Login\",\r\n              signUpTerms: \"By signing up, you agree to our <a href=\\\"https://alpheios.net/pages/userterms\\\" target=\\\"_blank\\\">terms of service</a> and <a href=\\\"https://alpheios.net/pages/privacy-policy\\\">privacy policy</a>.\"\r\n            },\r\n            mustAcceptTerms: true,\r\n            auth: {\r\n              redirect: false,\r\n              params: {\r\n                audience: this.env.AUDIENCE,\r\n                scope: 'openid profile email',\r\n                prompt: 'consent select_account',\r\n              },\r\n              responseType: 'token id_token'\r\n            }\r\n          })\r\n          // Handle login\r\n          this.auth0Lock.on('authenticated', (authResult) => {\r\n            this.auth0Lock.hide()\r\n            localStorage.setItem('access_token', authResult.accessToken)\r\n            localStorage.setItem('id_token', authResult.idToken)\r\n            const expirationDateTime = new Date(Date.now() + authResult.expiresIn * 1000)\r\n            localStorage.setItem('expiration_date_time', expirationDateTime.toJSON())\r\n            //localStorage.setItem('profile', JSON.stringify(profile))\r\n            resolve(\"Authenticated\")\r\n          })\r\n\r\n          // Unrecoverable error handler\r\n          this.auth0Lock.on('unrecoverable_error', (error) => {\r\n            console.error(`Auth0 Lock unrecoverable error: `, error)\r\n            reject('Auth0 Lock unrecoverable')\r\n          })\r\n\r\n          // An authorization error\r\n          this.auth0Lock.on('authorization_error', (error) => {\r\n            console.error(`Auth0 Lock authorization error: `, error)\r\n            reject('Auth0Lock authorization error')\r\n          })\r\n          this.auth0Lock.show()\r\n          // TODO: Handle a situation when `authenticated` event is never fired (is that ever possible)\r\n          // maybe via a Timeout?\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves user profile information from Auth0.\r\n   * @return {Promise}\r\n   */\r\n  getProfileData () {\r\n    return new Promise((resolve, reject) => {\r\n      const token = localStorage.getItem('access_token')\r\n      if (!token) {\r\n       console.error('You must login to call this protected endpoint!')\r\n       reject('Login required')\r\n      }\r\n      const expirationDateTimeStr = localStorage.getItem('expiration_date_time')\r\n      let authData = new AuthData() // eslint-disable-line prefer-const\r\n      authData.setAuthStatus(true)\r\n      authData.expirationDateTime = new Date(expirationDateTimeStr)\r\n      if (localStorage.getItem('is_test_user')) {\r\n          let testProfile =  {\r\n            name: 'Alpheios Test User',\r\n            nickname: 'testuser',\r\n            sub: 'testuser'\r\n          }\r\n          localStorage.setItem('profile', JSON.stringify(testProfile))\r\n          authData.userId = testProfile.sub\r\n          authData.userName = testProfile.name\r\n          authData.userNickname = testProfile.nickname\r\n          resolve(authData)\r\n      } else {\r\n        this.auth0Lock.getUserInfo(token, (error, profile) => {\r\n          if (error) {\r\n            reject(error)\r\n          } else {\r\n            localStorage.setItem('profile', JSON.stringify(profile))\r\n            authData.userId = profile.sub\r\n            authData.userName = profile.name\r\n            authData.userNickname = profile.nickname\r\n            resolve(authData)\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves user data from a remote provider (e.g. Alpheios servers).\r\n   * @return {Promise}\r\n   */\r\n  getUserData () {\r\n    return new Promise((resolve, reject) => {\r\n      const token = localStorage.getItem('access_token')\r\n\r\n      // block request from happening if no JWT token present\r\n      if (!token) {\r\n       console.error('You must login to call this protected endpoint!')\r\n       reject('Not Authenticated')\r\n      }\r\n      resolve(token)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of configured endpoints for the environment\r\n   * @return {Object}\r\n   */\r\n  getEndPoints () {\r\n    return this.env.ENDPOINTS\r\n  }\r\n\r\n  /**\r\n   * Respond to a logout request\r\n   */\r\n  logout() {\r\n    localStorage.removeItem('id_token')\r\n    localStorage.removeItem('access_token')\r\n    localStorage.removeItem('profile')\r\n    this.auth0Lock.logout({\r\n      returnTo: this.env.LOGOUT_URL\r\n    })\r\n  }\r\n\r\n}\r\n","/* global Auth0Lock */\r\n/**\r\n * Encapsulates Authentication Functionality For a Client Side Application\r\n */\r\nexport default class SessionAuthenticator {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} env - environment object with the following properties\r\n   *    LOGIN_URL - login url\r\n   *    LOGOUT_URL - logout url\r\n   *    SESSION_URL - session url\r\n   *    TOKEN_URL - token url\r\n   *    ENDPOINTS - Alpheios user api endpoints\r\n   */\r\n  constructor (env) {\r\n      this.sessionUrl = env.SESSION_URL\r\n      this.tokenUrl = env.TOKEN_URL\r\n      this.endpoints = env.ENDPOINTS\r\n      this._loginUrl = env.LOGIN_URL\r\n      this._logoutUrl = env.LOGOUT_URL\r\n  }\r\n\r\n  /**\r\n   * Login link for server\r\n   * @return {String} login link from config\r\n   */\r\n  loginUrl() {\r\n    return this._loginUrl\r\n  }\r\n\r\n  /**\r\n   * Logout link for server\r\n   * @return {String} logout link from config\r\n   */\r\n  logoutUrl() {\r\n    return this._logoutUrl\r\n  }\r\n\r\n  session () {\r\n    return new Promise((resolve,reject) => {\r\n      window.fetch(this.sessionUrl).then((resp) => {\r\n        if (! resp.ok) {\r\n          reject(resp.code)\r\n        } else {\r\n          resolve(resp.json())\r\n        }\r\n      }).catch((error) => {\r\n        reject(`Session request failed ${error}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  authenticate () {\r\n    // TODO we should check to see if we already have a valid idToken before\r\n    // initiating authentication\r\n    return new Promise((resolve, reject) => {\r\n      reject(\"Server Side Authenticator\")\r\n    })\r\n  }\r\n\r\n  getUserData () {\r\n    return new Promise((resolve,reject) => {\r\n      window.fetch(this.tokenUrl).then((resp) => {\r\n        if (! resp.ok) {\r\n          reject(resp.code)\r\n        } else {\r\n          resolve(resp.json())\r\n        }\r\n      }).catch((error) => {\r\n        reject(`token request failed ${error}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of configured endpoints for the environment\r\n   * @return {Object}\r\n   */\r\n  getEndPoints () {\r\n    return this.endpoints\r\n  }\r\n\r\n  /**\r\n   * Respond to a logout request\r\n   */\r\n  logout() {\r\n    return\r\n  }\r\n\r\n}\r\n","/**\r\n * Contains Alpheios state\r\n * @property {panelStatus} panelStatus\r\n */\r\nexport default class State {\r\n  constructor (tabID) {\r\n    this.panelStatus = undefined\r\n    this.tab = undefined\r\n    this.watchers = new Map()\r\n  }\r\n\r\n  static create (source) {\r\n    let copy = new State()\r\n    for (let key of Object.keys(source)) {\r\n      copy[key] = source[key]\r\n    }\r\n    return copy\r\n  }\r\n\r\n  static get defaults () {\r\n    return {\r\n      panelStatus: State.statuses.panel.OPEN\r\n    }\r\n  }\r\n\r\n  static get statuses () {\r\n    return {\r\n      embedLib: {\r\n        PENDING: Symbol.for('Alpheios_Status_Pending'), // Has not been fully initialized yet\r\n        ACTIVE: Symbol.for('Alpheios_Status_Active'), // Is loaded and active\r\n        DEACTIVATED: Symbol.for('Alpheios_Status_Deactivated'), // Has been loaded, but is deactivated\r\n        DISABLED: Symbol.for('Alpheios_Status_Disabled') // Has been loaded, but it is disabled\r\n      },\r\n      panel: {\r\n        OPEN: Symbol.for('Alpheios_Status_PanelOpen'), // Panel is open\r\n        CLOSED: Symbol.for('Alpheios_Status_PanelClosed'), // Panel is closed\r\n        DEFAULT: Symbol.for('Alpheios_Status_PanelDefault') // Panel should set its state according to default values\r\n      },\r\n      tab: {\r\n        DEFAULT: 'default' // A tab should be set according to default values\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a watcher function that is called every time a property is changed using a setItem() method.\r\n   * @param {String} property - A name of a property that should be monitored\r\n   * @param {Function} watchFunc - A function that will be called every time a property changes\r\n   * @return {State} Reference to self for chaining\r\n   */\r\n  setWatcher (property, watchFunc) {\r\n    this.watchers.set(property, watchFunc)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * SetItem provides a monitored way to change state. If value is assigned to a data property directly\r\n   * there is no way to know if a property was changed. However, if a property was changed using setItem() method,\r\n   * and if there is a watcher function registered for a changed property name,\r\n   * this function will be called on every property change, passing a changed property name as an argument.\r\n   * @param key\r\n   * @param value\r\n   * @return {State}\r\n   */\r\n  setItem (key, value) {\r\n    this[key] = value\r\n    if (this.watchers && this.watchers.has(key)) {\r\n      this.watchers.get(key)(key, this)\r\n    }\r\n    return this\r\n  }\r\n\r\n  isPanelOpen () {\r\n    return this.panelStatus === State.statuses.panel.OPEN\r\n  }\r\n\r\n  isPanelClosed () {\r\n    return this.panelStatus === State.statuses.panel.CLOSED\r\n  }\r\n\r\n  isPanelStateDefault () {\r\n    return this.panelStatus === State.statuses.panel.DEFAULT\r\n  }\r\n\r\n  isPanelStateValid () {\r\n    return (\r\n      this.panelStatus === State.statuses.panel.OPEN ||\r\n      this.panelStatus === State.statuses.panel.CLOSED\r\n    )\r\n  }\r\n\r\n  setPanelOpen () {\r\n    this.setItem('panelStatus', State.statuses.panel.OPEN)\r\n    return this\r\n  }\r\n\r\n  setPanelClosed () {\r\n    this.setItem('panelStatus', State.statuses.panel.CLOSED)\r\n    return this\r\n  }\r\n\r\n  changeTab (tabName) {\r\n    this.setItem('tab', tabName)\r\n    return this\r\n  }\r\n\r\n  activateUI () {\r\n    this.setItem('uiActive', true)\r\n    return this\r\n  }\r\n\r\n  // TODO: A temporary solution for compatibility with TabScript.\r\n  isActive () {\r\n    return this.status === State.statuses.embedLib.ACTIVE\r\n  }\r\n\r\n  isDeactivated () {\r\n    return this.status === State.statuses.embedLib.DEACTIVATED\r\n  }\r\n\r\n  isDisabled () {\r\n    return this.status === State.statuses.embedLib.DISABLED\r\n  }\r\n\r\n  isTabStateDefault () {\r\n    return this.tab === State.statuses.tab.DEFAULT\r\n  }\r\n\r\n  uiIsActive () {\r\n    return this.uiActive\r\n  }\r\n\r\n  activate () {\r\n    this.status = State.statuses.embedLib.ACTIVE\r\n    return this\r\n  }\r\n\r\n  deactivate () {\r\n    this.status = State.statuses.embedLib.DEACTIVATED\r\n    return this\r\n  }\r\n\r\n  disable () {\r\n    this.status = State.statuses.embedLib.DISABLED\r\n    return this\r\n  }\r\n}\r\n"],"sourceRoot":""}